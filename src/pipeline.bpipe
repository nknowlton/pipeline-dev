// currently runs qc, does not wait for confirmation on whether to continue the run, 
// trims, and does a 2nd lot of qc to the trimmed reads. 
// Once this is parrallelized, should be able to insert multiqc steps. 

concurrency=1000
bwaIndex="/blue/reference/hg19.fa.gz"
picardLoc = "/blue/picard/picard.jar"
output.dir="/blue/temp"

qc = {
    output.dir="../data/fastqc"
    //exec "module load FastQC"
    multi "fastqc -t 1 $input1 -o fastqc/",
        "fastqc -t 1 $input2 -o fastqc/",
        "fastqc -t 1 $input3 -o fastqc/",
        "fastqc -t 1 $input4 -o fastqc/"
}


trim = {
    output.dir="/nesi/nobackup/uoa02606/data/intermediateFiles"
    // this assumes that the input is illumina, as we're not autodetecting across a variety of possible adapters,
    // which would be possible with trim_glaore, but that requires changes to trim_galores output methods. 
    // cores=0 detects how many cores are available and uses them.
    exec "cutadapt -a AGATCGGAAGAGC --pair-filter=any --cores=0 -q 16 --minimum-length=50 -o $output1 -p $output2 $input1 $input2","trim"
    //exec "cutadapt -a AGATCGGAAGAGC --pair-filter=any --cores=0 -q 16 --minimum-length=50 -o $output3 -p $output4 $input3 $input4","trim"
}



align = { 
    output.dir="/nesi/nobackup/uoa02606/data/intermediateFiles"
    // align the tumour sample and the 
    exec "bwa mem -t 12 -R '@RG\\tID:${SAMPLE}_02\\tSM:$SAMPLE\\tLB:${SAMPLE}_02\\tPL:ILLUMINA' $bwaIndex $input1 $input2 | samtools sort -@12 -O BAM -o $output.bam", "align"

}


markDuplicates = {
    output.dir="/nesi/nobackup/uoa02606/data/intermediateFiles"
    exec "java -jar  $picardLoc MarkDuplicates I=$input1.bam O=$output1.bam M=$output._dup_metrics.txt CREATE_INDEX=TRUE", "removeDuplicates"


}

//trim align markDups recalibrate CallHaplotypes Annotate

run { 
   "%_*.fastq.gz" * [qc,trim] + "%_*.trim" * [align] + "%_*" * [markDuplicates] + "%_*" * [recalibrate] //+ "%_" * [haplotypeCalling] +   "%_" *  [annotation]
}